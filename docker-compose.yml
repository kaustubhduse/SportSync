version: '3.8'

services:
  # Auth Service
  auth-service:
    build: ./auth-service
    container_name: auth-service
    ports:
      - '5001:5001'
    env_file:
      - ./auth-service/.env
    depends_on:
      - postgres_auth
    networks:
      - app-network
    volumes:
      - ./auth-service:/app
      - /app/node_modules

  # Auth DB
  postgres_auth:
    image: postgres:15
    container_name: postgres_auth
    restart: always
    env_file:
      - ./auth-service/db.env
    ports:
      - '5433:5432'
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    networks:
      - app-network

  # User Service
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - '5002:5002'
    env_file:
      - ./user-service/.env
    depends_on:
      - postgres_user
    networks:
      - app-network
    volumes:
      - ./user-service:/app
      - /app/node_modules

  # User DB
  postgres_user:
    image: postgres:15
    container_name: postgres_user
    restart: always
    env_file:
      - ./user-service/db.env
    ports:
      - '5434:5432'
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Event Service
  event-service:
    build: ./event-service
    container_name: event-service
    ports:
      - '5003:5003'
    env_file:
      - ./event-service/.env
    depends_on:
      - mongo_event
      - rabbitmq
    networks:
      - app-network
    volumes:
      - ./event-service:/app
      - /app/node_modules

  # MongoDB for Event Service
  mongo_event:
    image: mongo:latest
    container_name: mongo_event
    restart: always
    ports:
      - '27018:27017'
    volumes:
      - mongo_event_data:/data/db
    networks:
      - app-network

  # # Auction Service
  # auction-service:
  #   build: ./auction-service
  #   container_name: auction-service
  #   ports:
  #     - '5004:5004'
  #   env_file:
  #     - ./auction-service/.env
  #   depends_on:
  #     - mongo_auction
  #     - redis_auction
  #     - rabbitmq
  #   networks:
  #     - app-network
  #   volumes:
  #     - ./auction-service:/app
  #     - /app/node_modules

  # # MongoDB for Auction Service
  # mongo_auction:
  #   image: mongo:latest
  #   container_name: mongo_auction
  #   restart: always
  #   ports:
  #     - '27019:27017'
  #   volumes:
  #     - mongo_auction_data:/data/db
  #   networks:
  #     - app-network

  # # Redis for Auction Service
  # redis_auction:
  #   image: redis:latest
  #   container_name: redis_auction
  #   restart: always
  #   ports:
  #     - '6380:6379'
  #   networks:
  #     - app-network

  # # Live Score Service
  # live-score-service:
  #   build: ./live-score-service
  #   container_name: live-score-service
  #   ports:
  #     - '5006:5006'
  #   env_file:
  #     - ./live-score-service/.env
  #   depends_on:
  #     - mongo_live_score
  #     - redis_live_score
  #   networks:
  #     - app-network
  #   volumes:
  #     - ./live-score-service:/app
  #     - /app/node_modules

  # # MongoDB for Live Score Service
  # mongo_live_score:
  #   image: mongo:latest
  #   container_name: mongo_live_score
  #   restart: always
  #   ports:
  #     - '27020:27017'
  #   volumes:
  #     - mongo_live_score_data:/data/db
  #   networks:
  #     - app-network

  # # Redis for Live Score Service
  # redis_live_score:
  #   image: redis:latest
  #   container_name: redis_live_score
  #   restart: always
  #   ports:
  #     - '6381:6379'
  #   networks:
  #     - app-network

  # # Payment Service
  #   # Payment Service
  # payment-service:
  #   build: ./payment-service
  #   container_name: payment-service
  #   ports:
  #     - '5005:5005'
  #   env_file:
  #     - ./payment-service/.env
  #   depends_on:
  #     - mongo_payment
  #     - redis_payment
  #   networks:
  #     - app-network
  #   volumes:
  #     - ./payment-service:/app
  #     - /app/node_modules



  # # MongoDB for Payment Service
  # mongo_payment:
  #   image: mongo:latest
  #   container_name: mongo_payment
  #   restart: always
  #   ports:
  #     - '27021:27017'
  #   volumes:
  #     - mongo_payment_data:/data/db
  #   networks:
  #     - app-network
  
  # redis_payment:
  #   image: redis:latest
  #   container_name: redis_payment
  #   restart: always
  #   ports:
  #     - '6382:6379'
  #   networks:
  #     - app-network
      
  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - ./rmq.env
    networks:
      - app-network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 10s

  # api-gateway:
  #   build: ./api-gateway
  #   container_name: api-gateway
  #   ports:
  #     - '5000:5000'
  #   env_file:
  #     - ./api-gateway/.env
  #   depends_on:
  #     - auth-service
  #     - user-service
  #     - event-service
  #     - auction-service
  #     - payment-service
  #     - live-score-service
  #   networks:
  #     - app-network
  #   volumes:
  #     - ./api-gateway:/app
  #     - /app/node_modules


volumes:
  postgres_auth_data:
  postgres_user_data:
  mongo_event_data:
  # mongo_auction_data:
  # mongo_live_score_data:
  # mongo_payment_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge
